%include "asm_io.inc"
global asm_main
section .data

ermsg: db 'ERROR: The number of line arguments is not 2', 0

ermsg2: db "ERROR:  The length of the string is not between 1 and 30", 0

ermsg3: db 'ERROR: The characters in the 2nd arguement should not contain anything other than "0", "1" or "2"'

printmsg: db 'sorted suffixes', 0

section .bss

argc: resb 1
N: resd 1
X: resb 30
level: resb 1
inputstring: resb 30
i: resd 1
j: resd 1
n: resd 1
m: resd 1
k: resd 1
o: resd 1
Z_i: resd 1

section .text

sufcmp:
   enter 0,0
   pusha
   mov [i], dword eax
   mov [j], dword ecx
   mov eax, dword [N]
   sub eax, dword [i]   
   mov [n], dword eax
   mov eax, dword [N]
   sub eax, dword [j]
   mov [m], dword eax
   mov eax, dword [m]
   mov ecx, dword [n]
   cmp eax, ecx
   jl om_loop
     jmp on_loop
   om_loop:
      mov eax, dword [m]
      mov ecx, dword 0
      cmp ecx, eax
      je if_statement
         mov [o], dword ecx
         add [o], dword [i]
         add ebx, dword [o];;;;;;;;;;;;;;;;;;;;;;;
         mov ecx, ebx
         mov ebx, dword [X]
         
         
         
   if_statement:      
      mov eax, 0
   on_loop:
      mov eax, 0
asm_main:
   enter 0,0
   pusha
   mov eax, dword [ebp+8]		; [ebp + 8] contains the number of arguements

   mov [argc], eax

   CHECK2ARGS: cmp dword [argc], dword 2

   jnz ERRORMSG1			; if number of arguements are not 0, then it will jump to ERRORMSG1, where an error mesaage is printed
      
      mov eax, dword [ebp+12]
      add eax, 4
      mov ebx, dword [eax]		; ebx contains the 2nd line arguement
       
      mov [inputstring], dword ebx      ; inputstring contains the address of 2nd line arguement
     
      jmp CHECK_STRING_LENGTH
      
      popa
      leave
      ret
   
   CHECK_STRING_LENGTH:
      mov ecx, 0
      mov eax, 0
      mov eax, ebx   
      LOOP1: cmp byte [eax], byte 0
      je string_length
         inc eax
         inc ecx
         jmp LOOP1
         
      string_length:
         mov [N], dword ecx			; N contains the address of string length and ecx contains the string length
    
         cmp ecx, dword 1
         jnge ERRORMSG2
            cmp ecx, dword 30
            jnle ERRORMSG2
               jmp CHARACTER_CHECK
  
   CHARACTER_CHECK:
     
      
      mov ecx, 0
      mov eax, 0
      
      mov eax, ebx
      
      LOOP3:
      cmp ecx, dword [N]
      je ARRAY
         jmp CHECK_0
      
      CHECK_0:
         cmp byte [eax], byte '0'
         je ADD
            jmp CHECK_1

      CHECK_1:
         cmp byte [eax], byte '1'
         je ADD
            jmp CHECK_2

      CHECK_2:
         cmp byte [eax], byte '2'
         je ADD
            jmp ERRORMSG3

      ADD:
         inc ecx
         inc eax
         jmp LOOP3

   ARRAY:
      mov ecx, 0
      mov eax, 0
      mov ecx, X
      mov eax, dword [ebp+12]
      mov ebx, dword [eax+4]
      mov eax, 0
      mov eax, dword [N]
      mov [i], dword 0
      LOOP8: cmp [i], eax
      jge print_array
      
         mov al, byte[ebx]
	 mov byte[ecx], al
         add ecx, dword 1
         add ebx, dword 1
         add [i], dword 1
         jmp LOOP8
         
   print_array:
      mov eax, X
      call print_string
      call print_nl
      jmp bubble_sort
   
   bubble_sort:
      mov eax, 0
      mov eax, dword [N]
      mov ebx, X
      mov ecx, 0
      
      LOOP_for_i:
      cmp eax, dword 0
       je print_suffix
         cmp ecx, eax
          je print_suffix
            push ecx
            push eax
            push ebx
            call sufcmp
         
    
   ERRORMSG1:
      mov eax, ermsg
      call print_string
      call print_nl
      popa
      leave
      ret
   
   ERRORMSG2:
      mov eax, ermsg2
      call print_string
      call print_nl
      popa
      leave
      ret

   ERRORMSG3:
      mov eax, ermsg3
      call print_string
      call print_nl
      popa
      leave
      ret
